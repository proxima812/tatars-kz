---
import { Icon } from "astro-icon/components"

const { data } = Astro.props

const socialPlatforms = [
	{
		name: "Facebook",
		url: `https://www.facebook.com/share.php?u=${Astro.url}&title=${data.title}`,
		mdi: "mdi:facebook",
	},
	{
		name: "Telegram",
		url: `https://telegram.me/share/url?url=${Astro.url}&text=${data.title}`,
		mdi: "mdi:telegram",
	},
	{
		name: "ВКонтакте",
		url: `https://vk.com/share.php?url=${Astro.url}&title=${data.title}`,
		mdi: "mdi:vk",
	},
	{
		name: "X",
		url: `https://twitter.com/home/?status=${data.title}${Astro.url}`,
		mdi: "mdi:share-variant-outline",
	},
]
---

<div
	class="hs-dropdown relative inline-flex [--auto-close:inside] [--placement:top-left]"
>
	<button
		id="hs-dropup"
		type="button"
		aria-label="Поделится"
		class="hs-dropdown-toggle bg-white inline-flex items-center gap-x-2 rounded-lg px-4 py-3 font-medium text-zinc-600 outline-none ring-zinc-500 transition duration-300 hover:bg-zinc-200 hover:text-zinc-700 focus-visible:ring dark:ring-zinc-200 dark:bg-dark dark:text-zinc-300 dark:hover:bg-zinc-700 dark:hover:text-zinc-300 dark:focus:outline-none"
	>
		<Icon name="mdi:share-variant-outline" />

		Поделится постом
	</button>

	<div
		class="hs-dropdown-menu duration z-10 hidden w-72 divide-y divide-zinc-200 rounded-lg bg-zinc-50 p-2 opacity-0 shadow-md transition-[opacity,margin] hs-dropdown-open:opacity-100 dark:divide-zinc-700 dark:border dark:border-zinc-700 dark:bg-dark"
		aria-labelledby="hs-dropup"
	>
		<div class="py-2 first:pt-0 last:pb-0">
			{
				socialPlatforms.map(platform => (
					<a
						class="flex items-center gap-x-3.5 rounded-lg px-3 py-2  text-zinc-700 hover:bg-zinc-200 focus:bg-zinc-100  focus:outline-none dark:text-zinc-300 dark:hover:bg-zinc-700 dark:hover:text-zinc-300 dark:focus:bg-zinc-700 "
						href={platform.url}
					>
						<Icon name={platform.mdi} />в {platform.name}
					</a>
				))
			}
		</div>
		<div class="py-2 first:pt-0 last:pb-0">
			<button
				type="button"
				class="js-clipboard hover:text-dark focus-visible:ring-secondary group inline-flex w-full items-center gap-x-3.5 rounded-lg px-3 py-2 text-zinc-700 hover:bg-zinc-200 focus:bg-zinc-100 focus:outline-none focus-visible:outline-none focus-visible:ring-1 dark:text-zinc-300 dark:hover:bg-zinc-700 dark:hover:text-zinc-300 dark:focus:bg-zinc-700"
				data-clipboard-success-text="Скопировано!"
			>
				<svg
					class="js-clipboard-default h-4 w-4 transition group-hover:rotate-6"
					width="24"
					height="24"
					viewBox="0 0 24 24"
					fill="none"
					stroke="currentColor"
					stroke-width="2"
					stroke-linecap="round"
					stroke-linejoin="round"
				>
					<rect width="8" height="4" x="8" y="2" rx="1" ry="1"></rect>
					<path
						d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"
					></path>
				</svg>

				<svg
					class="js-clipboard-success hidden h-4 w-4 text-zinc-700 dark:text-zinc-300"
					width="24"
					height="24"
					viewBox="0 0 24 24"
					fill="none"
					stroke="currentColor"
					stroke-width="2"
					stroke-linecap="round"
					stroke-linejoin="round"
				>
					<polyline points="20 6 9 17 4 12"></polyline>
				</svg>
				<span class="js-clipboard-success-text">Скопировать</span>
			</button>
		</div>
	</div>
</div>

<!--Import the necessary Dropdown and Clipboard plugins-->
<!--https://preline.co/plugins/html/dropdown.html-->
<!-- https://clipboardjs.com/ -->
<script>
	import "@preline/dropdown/index.js"
</script>

<script>
	import ClipboardJS from "clipboard"

	//  Решить astro:page-load и astro:after-swap !!!!
	;(function () {
		window.addEventListener("load", () => {
			const clipboards = document.querySelectorAll<HTMLElement>(".js-clipboard")

			clipboards.forEach(el => {
				const clipboard = new ClipboardJS(el, {
					text: () => {
						return window.location.href
					},
				})

				clipboard.on("success", () => {
					const defaultElement = el.querySelector<HTMLElement>(".js-clipboard-default")
					const successElement = el.querySelector<HTMLElement>(".js-clipboard-success")
					const successTextElement = el.querySelector<HTMLElement>(
						".js-clipboard-success-text",
					)
					const successText = el.dataset.clipboardSuccessText || ""
					let oldSuccessText: string | undefined

					if (successTextElement) {
						oldSuccessText = successTextElement.textContent || ""
						successTextElement.textContent = successText
					}

					if (defaultElement && successElement) {
						defaultElement.style.display = "none"
						successElement.style.display = "block"
					}

					setTimeout(() => {
						if (successTextElement && oldSuccessText !== undefined) {
							successTextElement.textContent = oldSuccessText
						}

						if (defaultElement && successElement) {
							successElement.style.display = ""
							defaultElement.style.display = ""
						}
					}, 800)
				})
			})
		})
	})()
</script>
